<?php

/**
 * @file
 * Drupoid main functions.
 */

/**
 * Implements hook_menu().
 */
function drupoid_menu() {
  $items = array();

  $items['drupoid'] = array(
    'title' => 'Drupoid',
    'page callback' => 'drupoid_request',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/media/drupoid'] = array(
    'title' => 'Drupoid',
    'description' => 'Configure the settings for Android application.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupoid_config'),
    'access arguments' => array('administer drupoid'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function drupoid_permission() {
  return array(
    'administer drupoid' => array(
      'title' => t('Administer Drupoid'),
      'description' => t('Configure your Drupoid settings')
    ),
  );
}

/**
 * Menu callback: configuration form.
 */
function drupoid_config($form, $form_state) {

  $options = array();
  $instances = field_info_instances('node');
  foreach ($instances as $bundle => $fields) {
    foreach ($fields as $field_name => $field) {
      $field_info = field_info_field($field_name);
      if ($field_info['type'] == 'image') {
        $options[$bundle . '|' . $field_name] = $bundle . ': ' . $field_name;
      }
    }
  }
  $form['drupoid_image_field'] = array(
    '#title' => t('Image field'),
    '#required' => TRUE,
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => variable_get('drupoid_image_field'),
  );

  $form['drupoid_status'] = array(
    '#title' => t('Publish immediately'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('drupoid_status'),
  );

  $form['drupoid_debug'] = array(
    '#title' => t('Log the $_POST variable to watchdog. Turn off in production.'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('drupoid_debug'),
  );

  return system_settings_form($form);
}

/**
 * Menu callback: perform the drupoid request.
 */
function drupoid_request() {

  // Debug ?
  if (variable_get('drupoid_debug')) {
    watchdog('drupoid_debug', print_r($_POST, TRUE));
  }

  // Determine request type.
  $request_type = _drupoid_get_request_type();
  if (!$request_type) {
    drupoid_end_request(t('Invalid request type.'), WATCHDOG_WARNING);
  }

  // Always authenticate.
  if (!drupoid_service_authenticate()) {
    drupoid_end_request(t('Sorry, unrecognized username or password.'), WATCHDOG_NOTICE);
  }

  // If only authenticate, return here.
  if ($request_type == 'authenticate') {
    drupoid_end_request(t('Authentication succeeded for @user', array('@user' => $_POST['drupoid_username'])), WATCHDOG_NOTICE);
  }

  // Delegate to separate function.
  $callback = 'drupoid_service_'  . $request_type;
  $result = $callback();
  drupoid_end_request($result['toast'], $result['severity']);
}

/**
 * End the Drupoid request.
 *
 * @param $toast
 *   A string to send back to the application and log to watchdog.
 * @param $severity
 *   A watchdog constant.
 */
function drupoid_end_request($toast, $severity) {
  watchdog('drupoid', $toast, array(), $severity);
  print $toast;
  exit();
}

/**
 * Drupoid authenticate service.
 */
function drupoid_service_authenticate() {

  // We need 2 variables at least.
  if (!isset($_POST['drupoid_username']) && !isset($_POST['drupoid_password'])) {
    return array(
      'severity' => WATCHDOG_WARNING,
      'toast' => t('No username or password supplied.'),
    );
  }

  // Authenticate against user.
  return user_authenticate($_POST['drupoid_username'], $_POST['drupoid_password']);
}

/**
 * Drupoid image upload service.
 */
function drupoid_service_image_upload() {

    // Title send through ?
  if (!isset($_POST['title'])) {
    return array(
      'severity' => WATCHDOG_NOTICE,
      'toast' => t('No title found in request.'),
    );
  }

  // Image send through ?
  if (!isset($_POST['image'])) {
    return array(
      'severity' => WATCHDOG_NOTICE,
      'toast' => t('No image found in request.'),
    );
  }

  // Is the drupoid_image_field variable set.
  if (!variable_get('drupoid_image_field')) {
    return array(
      'severity' => WATCHDOG_NOTICE,
      'toast' => t('No image field set. Configure it on your Drupal installation.'),
    );
  }

  // Basic checks are ok. Let's move on.
  $severity = WATCHDOG_NOTICE;

  // Try to save the file.
  $file = _drupoid_save_upload('image');

  if ($file) {

    // Build node.
    list($bundle, $image_field_name) = explode('|', variable_get('drupoid_image_field'));
    $node = new stdClass();
    $node->title = $_POST['title'];
    $node->type = $bundle;
    $node->status = variable_get('drupoid_status', FALSE);
    $node->name = $_POST['drupoid_username'];
    $node->language = LANGUAGE_NONE;
    $node->{$image_field_name}[LANGUAGE_NONE][0] = (array) $file;

    // Save the node.
    node_submit($node);
    node_save($node);
    if ($node->nid) {
      $toast = t('Image has been posted.');
      cache_clear_all();
    }
    else {
      $severity = WATCHDOG_WARNING;
      $toast = t('Error saving new node.');
    }
  }
  else {
    $severity = WATCHDOG_WARNING;
    $toast = t('Image file could not be saved.');
  }

  return array(
    'severity' => $severity,
    'toast' => $toast,
  );
}

/**
 * Helper function to upload an image.
 *
 * @param $image_post_key
 *   The key in the $_POST variable to look for
 *   the image.
 */
function _drupoid_save_upload($image_post_key) {

  $image = $_POST[$image_post_key];
  $binary = base64_decode($image);
  $filename = 'public://android_' . time() . '.jpg';

  return file_save_data($binary, $filename);
}

/**
 * Helper function to determine the request type.
 */
function _drupoid_get_request_type() {

  $request_type = isset($_POST['request_type']) ? $_POST['request_type'] : FALSE;

  if (in_array($request_type, array('authenticate', 'image_upload'))) {
    return $request_type;
  }

  return FALSE;
}